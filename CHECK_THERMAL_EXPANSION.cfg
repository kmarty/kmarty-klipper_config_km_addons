# Checks thermal expansion of whole hotend, from it's mount to the tip of the nozzle
# Usage: CHECK_THERMAL_EXPANSION TEMP=<temperature of hotend during measurement> MINUTES=<number of minutes/count of checking>
#
# - Measures cold hotend
# - Heatup hotend
# - Measures hotend themral expansion right after heat up
# - If "MINUTES=" is used, then it waits and measure each minute of waiting
# - Shows all measurement during test
# - Cooldown hootend
#
#  RatOS v2.1.x AND BEACON PROBE IS REQUIRED
#
[gcode_macro CHECK_THERMAL_EXPANSION]
gcode:
	{% if 'TEMP' not in params %}
		{action_raise_error("TEMP parameter must be set")}
	{% endif %}

	{% set temp = params.TEMP|int %}
	{% set minutes = params.MINUTES|default(0)|int %}

	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printable_x_max / 2 %}
	{% endif %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printable_y_max / 2 %}
	{% endif %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}

	{% if not beacon_contact_z_calibration %}
		{action_raise_error("This macro can be used only with Beacon conact")}
	{% endif %}

	SET_GCODE_VARIABLE MACRO=_CHECK_THERMAL_EXPANSION_RESULTS VARIABLE=results VALUE=""

	# home and abl the printer if needed
	_BEACON_HOME_AND_ABL

	# settle the mechanics down
	{% for i in range(10) %}
		beacon_poke speed=3 top=5 bottom=-0.6
	{% endfor %}

	# prvni	
	RESPOND MSG="First measurement (usually room temperature)"

	_CHECK_THERMAL_EXPANSION_PROBE
	_CHECK_THERMAL_EXPANSION_SAVE

	SET_HEATER_TEMPERATURE HEATER={"extruder" if default_toolhead == 0 else "extruder1"} TARGET={temp}
	TEMPERATURE_WAIT SENSOR={"extruder" if default_toolhead == 0 else "extruder1"} MINIMUM={temp} MAXIMUM={temp + 2}

	# prvni hned po ohrevu
	RESPOND MSG="First measurement at final temperature"

	_CHECK_THERMAL_EXPANSION_PROBE
	_CHECK_THERMAL_EXPANSION_SAVE

	{% for i in range(minutes) %}
		RESPOND MSG="One minute wait"
		M400
		G4 P{60*1000}
		#G4 P{5*1000}
		M400
		RESPOND MSG="Measuring after {i+1} minute(s)"

		_CHECK_THERMAL_EXPANSION_PROBE
		_CHECK_THERMAL_EXPANSION_SAVE
	{% endfor %}

	# move back to home position
	G0 Z{z_hop} F{z_speed}
	G0 X{safe_home_x} Y{safe_home_y} F{speed}

	# turn heater off
	SET_HEATER_TEMPERATURE HEATER={"extruder" if default_toolhead == 0 else "extruder1"} TARGET=0
	_CHECK_THERMAL_EXPANSION_PRINT
	M84

[gcode_macro _CHECK_THERMAL_EXPANSION_RESULTS]
variable_results: ""
gcode:

[gcode_macro _CHECK_THERMAL_EXPANSION_PROBE]
gcode:
	PROBE PROBE_METHOD=contact PROBE_SPEED=3 LIFT_SPEED=15 SAMPLES=5 SAMPLE_RETRACT_DIST=3 SAMPLES_TOLERANCE=0.005 SAMPLES_TOLERANCE_RETRIES=10 SAMPLES_RESULT=median
	BEACON_QUERY


[gcode_macro _CHECK_THERMAL_EXPANSION_SAVE]
gcode:
	{% set oldresults = printer['gcode_macro _CHECK_THERMAL_EXPANSION_RESULTS'].results %}
	{% set probe_results = printer.beacon.last_z_result|default(0)|float %}
	{% if oldresults == '' %}
		SET_GCODE_VARIABLE MACRO=_CHECK_THERMAL_EXPANSION_RESULTS VARIABLE=results VALUE="\"FIRST {probe_results|string}\""
	{% else %}
		SET_GCODE_VARIABLE MACRO=_CHECK_THERMAL_EXPANSION_RESULTS VARIABLE=results VALUE="\"{oldresults + "," + probe_results|string }\""
	{% endif %}

[gcode_macro _CHECK_THERMAL_EXPANSION_PRINT]
gcode:
	{% set results = printer['gcode_macro _CHECK_THERMAL_EXPANSION_RESULTS'].results %}
	RESPOND MSG="Measured results:"
	{% set pole = results.split(',') %}
	{% for i in range(pole|length) %}
		{action_respond_info("%s = %s" % (i, pole[i]))}
	{% endfor %}
